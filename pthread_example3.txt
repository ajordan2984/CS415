typedef struct result
{
pthread_barrier_t gate;
pthread_mutex_t lock;
int firstid;
int lastid;
int howmany;
} result;

typdef struct threadarg
{
int id;
} threadarg;
pthread_t threadpool[100];
threadarg data[100]
result r;

void* threadfn (void *a){
threadarg *t;
t= (threadarg*)a;


pthread_barrier_wait(&r.gate);
pthread_mutex_lock(&r.lock);

if((r.howmany++) ==0) {
r.firstid = t->id;

r.lastid= t->id;
pthread_mutex_unlock(&r.lock);
pthread_exit(0);
}

int main (int argc, char **argv){
int il
r.howmany = 0;

pthread_barrier_init(&r.gate,NULL,100);
pthread_mutex_init(&r.lock,NULL);
for (i=0; i<100; i++)
{
data[i].id = i;
pthread_create(&threadpool[i],NULL,&threadfn,&data[i]);
}

for(int i=0;i<100;i++)
{
if (pthread_join(threadpool[i],NULL))
{
fprint(stderr,"unable to join thread %d\n",i);
exit(0);
}
}

pthread_mutex_destroy(&r.lock);
pthread_barrier_destroy(&r.gate);
printf("%d\t%d\n",r.firstid,r.lastid);
return 0;






}



-D_POSIX_C_SOURCE=200809L
