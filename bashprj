/*
 * main.cpp
 *
 *  Created on: Jan 26, 2017
 *      Author: andrew
quick commands:
 g++ main.cpp -> compiles main when in directory
 .a/.out main.cpp -> only works when in directory of project
 ps -> shows working processes
 find help on topic : example - man fork() 
 execvp -> okay to use as its in the same family of exec commands
 chdir(*char) -> changes directory, save current directory and new directory
 ctrl + Z -> stop process
 kill %1 -> kills associated process by number
 */

/*
 * main.cpp
 *
 *  Created on: Jan 26, 2017
 *      Author: andrew
 */

#include <iostream>
#include <stdio.h>
#include <unistd.h>
// used with chdir() -> changes working directory
#include <sys/wait.h>
#include <sys/types.h>
#include <stdlib.h>
#include <dirent.h>
using namespace std;

void child_parser(int,char*[]);

int main(int argc,char* argv[])
{
    pid_t REpid = fork(); // returned pid
	switch (REpid)
	{
	case -1:
		perror ("fork went wrong");
		exit(1);
		break;
	case 0:
		cout<<"In child:"<<REpid<<endl;
		child_parser(argc,argv);
		exit(0);
		break;
	default:
		if (wait(0)==-1)
		perror("wait failed");
		cout<<"parrent:"<<REpid<<endl;
		break;
	}

	return 0;
}


void child_parser(int argc,char* argv[])
{
	/*
	 * Steps:
	 * 1. parse string
	 * 2. take off any /n,/r,/t chars at end
	 * 3. attach NULL end of array
	 */
	// Changes directories
	if (argv[1]== std::string("cd"))
	{
		string stuff;
		int changedir_test = chdir(argv[2]);
		if (changedir_test == -1)
			cout<<"Did not change directories"<<endl;

		// Success on changing directories
		// so display current path
		else
		{
			char buffer[200];
			char *newpath = getcwd(buffer,200);
			string currpath = newpath;
			cout<<currpath<<endl;
		}
	}
	// Executes commands

	else
	{
		cout<<"Error"<<endl;

		/*
		int checkEXEC = execvp(argv[0],argv);
		if (checkEXEC == -1)
			perror("exec encountered an error");
			*/
	}

}
