//Adam Moses
//Example regarding file descripors
#include "csapp.h"
int main (int argc, char *argv[])
{
    int fd1;
    int s=getpid() & 0x1;
    char c1, c2;
    char *fname = argv[1];
    fd1 = Open(fname, O_RDONLY, 0);
    Read(fd1, &c1, 1);
        if (fork())
          {
            sleep(s); //parent
            Read(fd1, &c2, 1);
            printf("Parent: c1 = %c,c2 = %c\n", c1, c2);
          }
        else
          {
            sleep(1-s); //child
            Read(fd1, &c2, 1);
            printf("Child: c1 = %c, c2 = %c\n", c1, c2);
          }
      return 0;
}
---------------------------------------------------------------------------------

//Example standard input and output being 
//redirected accordingly using the pipe and dup2 system calls

int main (void)
{
    enum {RD, WR}; //pipe fd index RD=0, WR=1
    int n, fd[2];
    pid_t pid;
    char buf[100];

    if(pipe(fd) < 0) // pipe created
      perror("pipe error");
    else if ((pid = fork()) < 0) // child forked
      perror("fork error");

    else if (pid == 0) 
      {
        close(fd[WR]); //child's fd[1] closed
        n = read(fd[RD], buf, 100);
        write(STDOUT_FILENO, buf, n):
      }
     else
      {
        close(fd[RD]);   // parent's fd[0] closed
        write(fd[WR],"Hello child\n", 15);
        wait(NULL);
       }
}

--------------------------------------------------------------------

//Redirecting Standard Output to a File
//The following example closes standard output for the current processes, 
//re-assigns standard output to go to the file referenced by pfd, 
//and closes the original file descriptor to clean up.
#include <unistd.h>
...
int pfd;
...
close(1);
dup(pfd);
close(pfd);
-----------------------------------------------------------------------

//The following example redirects messages from stderr to stdout.
#include <unistd.h>
...
dup2(2, 1); // 2-stderr; 1-stdout
...
----------------------------------------------------------------------

//One practical example is redirecting output messages to some other
//stream like some log file. Here is a sample code for I/O redirection.
#include <stdio.h>

main()
{
    int    fd;
    fpos_t pos;

    printf("stdout, ");

    fflush(stdout);
    fgetpos(stdout, &pos);
    fd = dup(fileno(stdout));
    freopen("stdout.out", "w", stdout);

    f();

    fflush(stdout);
    dup2(fd, fileno(stdout));
    close(fd);
    clearerr(stdout);
    fsetpos(stdout, &pos);        /* for C9X */

    printf("stdout again\n");
}

f()
{
printf("stdout in f()");
}
----------------------------------------------------------------------

